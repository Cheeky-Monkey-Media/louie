<?php
use Drupal\Core\Url;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_page_attachments_alter
 *
 * Add custom meta tags to the header.
 */
function louie_page_attachments_alter(&$page) {
  // Force IE to use Chrome Frame if installed.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'content' => 'ie=edge, chrome=1',
      'http-equiv' => 'x-ua-compatible',
    ),
  ), 'chrome_frame');

  // Remove image toolbar in IE.
  $page['#attached']['html_head'][] = array(array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'ImageToolbar',
      'content' => 'false',
    ),
  ), 'ie_image_toolbar');
}


/**
 * Implements hook_preprocess_html().
 * Prepares variables for the html.html.twig template.
 */
function louie_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're not on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    $alias = str_replace('/', '-', $alias);
    if (!empty($alias)) {
      $variables['attributes']['class'][] = 'page-' . $alias;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }
  else {
    $variables['attributes']['class'][] = 'front';
  }

  // Language classes
  $languageManager = \Drupal::languageManager();
  $language = $languageManager->getCurrentLanguage()->getId();
  $variables['attributes']['class'][] = 'language--' . $language;

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();

  $nid = \Drupal::RouteMatch()->getParameter('node');
}

/**
 * Implements template_preprocess_page
 *
 * Add convenience variables and settings.
 */
function louie_preprocess_page(&$variables) {
  if(theme_get_setting('louie_use_placeholders')) {
    $variables['#attached']['library'][] =  'louie/form-placeholders';
  }
}


/**
 * Implements hook_theme_suggestions_block_alter().
 * @function
 *   Add block type template suggestions.
 */
function louie_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];

  if (isset($content['#block_content']) && $content['#block_content'] instanceof \Drupal\block_content\BlockContentInterface) {
    $suggestion = 'block__' . $content['#block_content']->bundle();
    array_splice( $suggestions, 2, 0, $suggestion );
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 * @function
 *   Add node type to template suggestions.
 *   Add node title to template suggestions.
 */
function louie_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {

    $nodeTitle = strtolower($node->getTitle());
    $nodeTitle = preg_replace("/[^a-z0-9_\s-]/", "", $nodeTitle);
    $nodeTitle = preg_replace("/[\s-]+/", " ", $nodeTitle);
    $nodeTitle = preg_replace("/[\s_]/", "-", $nodeTitle);

    $suggestions[] = 'page__' . $node->getType();
    $suggestions[] = 'page__' . $nodeTitle;
  }
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 * @function
 *   Add vocabulary and view mode to taxonomy term theme suggestions.
 */
function louie_theme_suggestions_taxonomy_term_alter(&$suggestions, $vars) {
  $suggestion = 'taxonomy_term__' . $vars['elements']['name']['#bundle'] . '__' . $vars['elements']['#view_mode'];
  array_splice( $suggestions, 2, 0, $suggestion );
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function louie_preprocess_block(&$vars) {
  // Combine attributes.
  if ($vars['base_plugin_id'] == 'block_content') {
    if (!empty($vars['content']['#attributes']) && !empty($vars['attributes'])) {
      $vars['attributes'] = array_merge($vars['attributes'], $vars['content']['#attributes']);
    }
  }

  // Add some default block classes.
  $vars['attributes']['class'][] = 'block';
  $vars['attributes']['class'][] = 'block-' . Html::cleanCssIdentifier(Unicode::strtolower($vars['configuration']['provider']));
  $vars['attributes']['class'][] = 'block-' . Html::cleanCssIdentifier(Unicode::strtolower($vars['plugin_id']));
}
